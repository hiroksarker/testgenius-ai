import { ChatOpenAI } from "@langchain/openai";
import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';
import { TestDefinition } from '../../types';

export class VisualTestGenerator {
  private llm: ChatOpenAI;

  constructor() {
    this.llm = new ChatOpenAI({
      openAIApiKey: process.env.OPENAI_API_KEY,
      modelName: process.env.OPENAI_MODEL || 'gpt-4o',
      temperature: 0.1,
      maxTokens: 4000
    });
  }

  /**
   * üëÅÔ∏è Generate test from screenshot analysis
   */
  async generateFromScreenshot(screenshotPath: string, additionalDescription?: string): Promise<TestDefinition> {
    console.log(chalk.blue('üëÅÔ∏è Analyzing screenshot and generating test...'));

    try {
      // Check if screenshot exists
      if (!await fs.pathExists(screenshotPath)) {
        throw new Error(`Screenshot not found: ${screenshotPath}`);
      }

      // Read screenshot as base64
      const screenshotBuffer = await fs.readFile(screenshotPath);
      const base64Image = screenshotBuffer.toString('base64');

      const systemPrompt = `You are an expert UI testing engineer. Your task is to analyze a screenshot and generate a comprehensive test case.

Analyze the screenshot to identify:
1. UI elements present (buttons, forms, links, etc.)
2. Page layout and structure
3. User interactions possible
4. Expected user flows
5. Potential test scenarios

Generate a realistic test case that could be executed on this UI.`;

      const userPrompt = `Analyze this screenshot and generate a test case:

${additionalDescription ? `Additional context: ${additionalDescription}\n` : ''}

Generate a test case that:
1. Describes what the user sees
2. Identifies interactive elements
3. Suggests realistic user actions
4. Includes verification steps

Return as JSON with this structure:
{
  "id": "visual-test-id",
  "name": "Test name based on screenshot",
  "description": "Detailed description of what the test does",
  "priority": "High|Medium|Low",
  "tags": ["visual", "ui", "screenshot"],
  "site": "https://example.com",
  "task": "Specific task description",
  "testData": {},
  "steps": [
    {
      "action": "action-type",
      "description": "step description",
      "expectedResult": "expected outcome"
    }
  ]
}`;

      const response = await this.llm.invoke([
        { role: 'system', content: systemPrompt },
        { 
          role: 'user', 
          content: [
            { type: 'text', text: userPrompt },
            { type: 'image_url', image_url: { url: `data:image/png;base64,${base64Image}` } }
          ]
        }
      ]);

      const content = response.content as string;
      let test: TestDefinition;

      try {
        const jsonMatch = content.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          test = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error('No valid JSON found in response');
        }
      } catch (parseError) {
        console.log(chalk.yellow('‚ö†Ô∏è Could not parse AI response, creating fallback test'));
        test = this.createFallbackVisualTest(screenshotPath, additionalDescription);
      }

      // Validate and enhance test
      test = this.validateAndEnhanceVisualTest(test, screenshotPath);

      console.log(chalk.green('‚úÖ Visual test generated successfully'));
      return test;

    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è Visual analysis failed, creating fallback test'));
      return this.createFallbackVisualTest(screenshotPath, additionalDescription);
    }
  }

  /**
   * üíæ Save visual test to file
   */
  async saveTest(test: TestDefinition, outputPath: string): Promise<void> {
    try {
      await fs.ensureDir(path.dirname(outputPath));

      const content = `// Visual test generated by TestGenius AI
// Generated from screenshot analysis
// Generated on: ${new Date().toISOString()}

module.exports = {
  id: '${test.id}',
  name: '${test.name}',
  description: '${test.description}',
  priority: '${test.priority}',
  tags: ${JSON.stringify(test.tags)},
  site: '${test.site}',
  task: '${test.task}',
  testData: ${JSON.stringify(test.testData || {}, null, 2)},
  steps: ${JSON.stringify(test.steps || [], null, 2)}
};`;

      await fs.writeFile(outputPath, content);
      console.log(chalk.green(`‚úÖ Visual test saved to ${outputPath}`));

    } catch (error) {
      console.error(chalk.red('‚ùå Failed to save visual test:'), (error as Error).message);
      throw error;
    }
  }

  /**
   * üîß Validate and enhance visual test
   */
  private validateAndEnhanceVisualTest(test: any, screenshotPath: string): TestDefinition {
    return {
      id: test.id || `visual-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      name: test.name || 'Visual Analysis Test',
      description: test.description || `Test generated from screenshot analysis of ${path.basename(screenshotPath)}`,
      priority: test.priority || 'Medium',
      tags: Array.isArray(test.tags) ? [...test.tags, 'visual'] : ['visual', 'screenshot'],
      site: test.site || 'https://example.com',
      task: test.task || 'Execute visual test scenario',
      testData: {
        ...test.testData,
        screenshotPath: screenshotPath
      },
      steps: Array.isArray(test.steps) ? test.steps : []
    };
  }

  /**
   * üõ†Ô∏è Create fallback visual test when AI analysis fails
   */
  private createFallbackVisualTest(screenshotPath: string, additionalDescription?: string): TestDefinition {
    return {
      id: `fallback-visual-${Date.now()}`,
      name: 'Visual Analysis Test',
      description: `Basic test generated from screenshot: ${path.basename(screenshotPath)}${additionalDescription ? ` - ${additionalDescription}` : ''}`,
      priority: 'Medium',
      tags: ['fallback', 'visual', 'screenshot'],
      site: 'https://example.com',
      task: 'Execute basic visual test',
      testData: {
        screenshotPath: screenshotPath,
        description: additionalDescription || 'No additional description provided'
      },
      steps: [
        {
          action: 'navigate',
          description: 'Navigate to the website',
          expectedResult: 'Page loads successfully'
        },
        {
          action: 'verify',
          description: 'Verify page matches screenshot',
          expectedResult: 'Page elements match expected layout'
        },
        {
          action: 'screenshot',
          description: 'Take screenshot for comparison',
          expectedResult: 'Screenshot captured successfully'
        }
      ]
    };
  }
} 